name: Generate District Map

on:
  workflow_dispatch:
    inputs:
      district:
        description: 'District code (e.g., KY-06)'
        required: true
        default: 'KY-06'
      map_title:
        description: 'Map title'
        required: true
        default: 'KY-06 Congressional District'
      include_counties:
        description: 'Include county boundaries'
        required: true
        type: boolean
        default: true

jobs:
  generate-map:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gdal-bin libgdal-dev
        export GDAL_CONFIG=/usr/bin/gdal-config
    
    - name: Install Python dependencies
      run: |
        pip install folium==0.15.1 jinja2 requests
    
    - name: Download and process district boundaries
      run: |
        # Download congressional districts if not present
        if [ ! -f data/boundaries/ky_06/boundary.geojson ]; then
          echo "Downloading congressional districts..."
          cd data/boundaries/ky_06
          wget -q -O cd.zip "https://www2.census.gov/geo/tiger/TIGER2024/CD/tl_2024_21_cd119.zip"
          unzip -q cd.zip
          
          # Convert to GeoJSON and extract district 06
          ogr2ogr -f GeoJSON -t_srs EPSG:4326 -where "CD119FP = '06'" \
            boundary_temp.geojson tl_2024_21_cd119.shp
          
          # Simplify for size
          python3 -c "
import json
with open('boundary_temp.geojson', 'r') as f:
    data = json.load(f)
# Reduce coordinate precision to 5 decimal places
def round_coords(coords):
    if isinstance(coords[0], list):
        return [round_coords(c) for c in coords]
    return [round(c, 5) for c in coords]
for feature in data['features']:
    feature['geometry']['coordinates'] = round_coords(feature['geometry']['coordinates'])
with open('boundary.geojson', 'w') as f:
    json.dump(data, f, separators=(',', ':'))
"
          cp boundary.geojson boundary_simplified.geojson
          
          # Clean up
          rm -f *.zip *.shp *.shx *.dbf *.prj *.cpg *.xml boundary_temp.geojson
          cd ../../../
        fi
    
    - name: Download and process county boundaries
      if: ${{ github.event.inputs.include_counties == 'true' }}
      run: |
        echo "Downloading county boundaries..."
        cd data/boundaries
        mkdir -p counties
        cd counties
        
        # Download US counties
        wget -q -O counties.zip "https://www2.census.gov/geo/tiger/TIGER2024/COUNTY/tl_2024_us_county.zip"
        unzip -q counties.zip
        
        # Extract only Kentucky counties and convert to GeoJSON
        ogr2ogr -f GeoJSON -t_srs EPSG:4326 -where "STATEFP = '21'" \
          ky_counties.geojson tl_2024_us_county.shp
        
        # Extract KY-06 counties
        cd /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}
        python3 -c "
import json

KY06_COUNTIES = ['Anderson', 'Bourbon', 'Clark', 'Fayette', 
                 'Franklin', 'Harrison', 'Jessamine', 
                 'Nicholas', 'Scott', 'Woodford']

with open('data/boundaries/counties/ky_counties.geojson', 'r') as f:
    data = json.load(f)

ky06_features = []
for feature in data['features']:
    if feature['properties'].get('NAME') in KY06_COUNTIES:
        print(f'Found {feature[\"properties\"][\"NAME\"]} County')
        ky06_features.append(feature)

output = {'type': 'FeatureCollection', 'features': ky06_features}
with open('data/boundaries/ky_06/counties.geojson', 'w') as f:
    json.dump(output, f, separators=(',', ':'))

print(f'Extracted {len(ky06_features)} counties for KY-06')
"
        
        # Clean up large files
        rm -rf data/boundaries/counties/*
    
    - name: Generate map
      run: |
        python -m src.core.map_generator \
          --district "${{ github.event.inputs.district }}" \
          --title "${{ github.event.inputs.map_title }}" \
          --output outputs/index.html
    
    - name: Upload map artifact
      uses: actions/upload-artifact@v4
      with:
        name: generated-map
        path: outputs/index.html
    
    - name: Deploy to GitHub Pages
      if: success()
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./outputs
        keep_files: false
